# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Node.js CI

on:
  push:
    branches: [ "main" ]
    tags:
      - '**'
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest

    permissions:
      checks: write
      pull-requests: write
      contents: write

    steps:
    - name: 'ðŸ“„ Checkout'
      uses: actions/checkout@v4
      
    - name: 'ðŸ”¨ Use Node.js 20.x'
      uses: actions/setup-node@v3
      with:
        node-version: 20.x
        cache: 'npm'
        
    - name: 'ðŸ”¨ Install node packages'
      run: npm ci
    - name: Install node package for custom task
      run: npm ci
      working-directory: src/SpotCheckV0
      
    - name: 'ðŸ”¨ Build'
      run: npm run build
      
    - name: 'âœ… Test'
      uses: ArtiomTr/jest-coverage-report-action@v2
      with:
        test-script: npm test
        skip-step: install

    - name: 'ðŸ“¦ Package'
      if: startsWith(github.ref, 'refs/tags/')
      run: npm run package-extension -- --env version=${{github.ref_name}}
        
    - name: 'ðŸš€ Create release'
      if: startsWith(github.ref, 'refs/tags/')
      run: gh release create v${{github.ref_name}} --generate-notes
      env:
        GITHUB_TOKEN: ${{ github.TOKEN }}
      shell: bash
    
    - name: 'ðŸš€ Upload release files'
      if: startsWith(github.ref, 'refs/tags/')
      run: gh release upload ${{github.event.release.tag_name}} igorkalders.spotcheck-${{github.ref_name}}.vsix
      env:
        GITHUB_TOKEN: ${{ github.TOKEN }}
      shell: bash
    
    - name: 'ðŸ“¦ Publish package'
      if: startsWith(github.ref, 'refs/tags/')
      run: npm run publish-extension -- --vsix igorkalders.spotcheck-${{github.ref_name}} --auth-type pat -t ${{secrets.PUBLISH_PAT}}
