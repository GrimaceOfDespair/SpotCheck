# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Node.js CI

on:
  push:
    branches: [ "main" ]
  create:
    tags:
      - '*'
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest

    permissions:
      checks: write
      pull-requests: write
      contents: write

    steps:
    - name: 'ðŸ“„ Checkout'
      uses: actions/checkout@v4
      
    - name: 'ðŸ”¨ Use Node.js 20.x'
      uses: actions/setup-node@v3
      with:
        node-version: 20.x
        cache: 'npm'
        
    - name: 'ðŸ”¨ Install node packages'
      run: npm ci
    - name: Install node package for custom task
      run: npm ci
      working-directory: src/SpotCheckV0
      
    - name: 'ðŸ”¨ Build'
      run: npm run build
      
    - name: 'âœ… Test'
      uses: ArtiomTr/jest-coverage-report-action@v2
      with:
        test-script: npm test
        skip-step: install

    - name: 'ðŸ”– Set VERSION variable from tag'
      id: version
      if: startsWith(github.ref, 'refs/tags/')
      run: |
        # Extract major and minor and use run number for versioning unique vsix
        MAJOR=$(echo ${{ github.ref_name }} | sed -E 's/.*v([[:digit:]]+)\.[[:digit:]]+.*/\1/')
        MINOR=$(echo ${{ github.ref_name }} | sed -E 's/.*v[[:digit:]]+\.([[:digit:]]+).*/\1/')
        echo "VERSION=$MAJOR.$MINOR.${{ github.run_number }}" >> $GITHUB_ENV

        # Assume prerelease if existing release is marked as such, or tag contains hyphen
        # This allows us to create prerelease by either pushing prerelease tags or
        # creating an actual prerelease in GitHub
        IS_PRERELEASE=$(gh release view ${{ github.ref_name }} --json isPrerelease --jq '.isPrerelease' || echo '')
        if [[ $IS_PRERELEASE == 'true' || '${{ github.ref_name }}' == *'-'* ]]; then
          echo "VSIX_SUFFIX=-dev" >> $GITHUB_ENV
          echo "MODE=development" >> $GITHUB_ENV
          echo "RELEASE_ARGS=-p" >> $GITHUB_ENV
        else
          echo "VSIX_SUFFIX=" >> $GITHUB_ENV
          echo "MODE=production" >> $GITHUB_ENV
          echo "RELEASE_ARGS=" >> $GITHUB_ENV
        fi

        TASK_JSON=$(jq --arg Major $MAJOR --arg $MINOR --arg ${{ github.run_number }} '.version |= { "Major": $Major | tonumber, "Minor": $Minor | tonumber, "Patch": $Patch | tonumber }' src/SpotCheckV0/task.json) && echo $TASK_JSON > src/SpotCheckV0/task.json

        echo "EXISTING_RELEASE=$(gh release view ${{ github.ref_name }} --json name --jq '.name' || echo '')" >> $GITHUB_ENV

        # Make package description images relative from GitHub
        sed -i -r "s#(.*)(images/[^\"]+)(.*)#printf '%shttps://raw.githubusercontent.com/GrimaceOfDespair/SpotCheck/main/%s%s' '\1' '\2' '\3'#e" README.md
      env:
        GITHUB_TOKEN: ${{ github.TOKEN }}
        
    - name: 'ðŸ“¦ Package'
      if: steps.version.outcome == 'success'
      run: npm run package-extension -- --env version=$VERSION mode=$MODE
        
    - name: 'ðŸš€ Create release'
      if: ( steps.version.outcome == 'success' ) && ( env.EXISTING_RELEASE != github.ref_name )
      run: |
        gh release create v$VERSION --generate-notes $RELEASE_ARGS
      env:
        GITHUB_TOKEN: ${{ github.TOKEN }}
    
    - name: 'ðŸš€ Upload release files'
      if: steps.version.outcome == 'success'
      run: gh release upload ${{ github.ref_name }} igorkalders.spotcheck$VSIX_SUFFIX-$VERSION.vsix
      env:
        GITHUB_TOKEN: ${{ github.TOKEN }}
    
    - name: 'ðŸ“¦ Publish package'
      if: steps.version.outcome == 'success'
      run: npm run publish-extension -- --vsix igorkalders.spotcheck$VSIX_SUFFIX-$VERSION.vsix --auth-type pat -t ${{secrets.PUBLISH_PAT}}
